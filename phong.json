{"camera":{"position":[0,0,37],"target":[0,0,0],"nearClipping":0.1,"farClipping":1000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"mesh":"teapot","position":[0,-8,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW","blendEnable":true,"blendOperation":"FUNC_ADD","srcColorBlendFactor":"SRC_ALPHA","dstColorBlendFactor":"ONE_MINUS_SRC_ALPHA","srcAlphaBlendFactor":"SRC_ALPHA","dstAlphaBlendFactor":"ONE_MINUS_SRC_ALPHA","textureFiltering":"LINEAR_MIPMAP_LINEAR","maxAnisotropy":"1","showWireframe":false},"passes":{"Model":{"base":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex position in object space coordinates\nin vec3 vertexPosition;\n// Surface normal at the vertex in object space coordinates\nin vec3 vertexNormal;\n// Texture coordinates at that vertex\nin vec2 vertexTextureCoordinates;\n\nuniform vec4 lightPosition;\nuniform bool lightInCamspace;\n\n// Model matrix\nuniform mat4 mMatrix;\n// View matrix\nuniform mat4 vMatrix;\n// Projection matrix\nuniform mat4 pMatrix;\n// Normal matrix\nuniform mat4 normalMatrix;\n\nout vec3 vNormal;\nout vec3 vPosition;\n\n// Main program for each vertex\nvoid main() {\n  vec4 vertexCamSpace = vMatrix * mMatrix * vec4(vertexPosition, 1.0);\n  vPosition = vec3(vertexCamSpace) / vertexCamSpace.w;\n  vNormal = vec3(normalMatrix * vec4(vertexNormal, 0.0));\n  \n  gl_Position = pMatrix * vertexCamSpace;\n}"},"fragment":{"source":"#version 300 es\n\n// For better performance less precision\nprecision highp float;\n\nin vec3 vNormal;\nin vec3 vPosition;\nout vec4 fragColor;\n\nuniform vec4 lightPosition;\nuniform bool lightInCamspace;\n\nuniform float Ka;\nuniform float Kd;\nuniform float Ks;\n\nuniform vec4 ambient;\nuniform vec4 diffuse;\nuniform vec4 specular;\nuniform float shininess;\n\n// Main program for each fragment = pixel candidate\nvoid main() {\n\n  vec3 N = normalize(vNormal);\n  vec3 L = normalize(lightPosition.xyz - vPosition);\n\n  float lambertLaw = max(dot(N, L), 0.0);\n  float specularValue = 0.0;\n  if (lambertLaw > 0.0) {\n    vec3 R = reflect(-L, N);\n    vec3 V = normalize(-vPosition);\n    float specularAngle = max(dot(R, V), 0.0);\n    specularValue = pow(specularAngle, shininess);\n  }\n\n  fragColor = vec4(Ka * ambient +\n                   Kd * lambertLaw * diffuse +\n                   Ks * specularValue * specular);\n}"}},"uniforms":{"value":{"lightPosition":{"value":[0,0,0,1]},"lightInCamspace":{"value":[true]},"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"},"normalMatrix":{"value":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},"Ka":{"value":[1]},"Kd":{"value":[0.5]},"Ks":{"value":[1.5]},"ambient":{"value":[0.5,0,0,1]},"diffuse":{"value":[1,0,0,1]},"specular":{"value":[1,1,1,1]},"shininess":{"value":[10]}}}}},"Quad":{"R2T":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex coordinates in object space for the render quad\nin vec3 vertexPosition;\n// Texture coordinate for this vertex and the render quad\nin vec2 vertexTextureCoordinates;\n\n// Texture coordinate needs to be passed on to the R2T fragment shader\nout vec2 fragmentTextureCoordinates;\n\n// Main program for each vertex of the render quad\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  fragmentTextureCoordinates = vertexTextureCoordinates;\n}"},"fragment":{"source":"#version 300 es\n\nprecision highp float;\n\n// A texture sampling unit, which is bound to the render quad texture buffer\nuniform sampler2D textureRendered;\n\n// Texture coordinates coming from the vertex shader, interpolated through the rasterizer\nin vec2 fragmentTextureCoordinates;\nout vec4 fragColor;\n\n// Main program for each fragment of the render quad\nvoid main() {\n  fragColor = texture(textureRendered, fragmentTextureCoordinates.st);\n}"}},"uniforms":{"value":{"textureRendered":{"attachment":"Model/base Pass color"}}}}}},"output":{"image":"Quad/R2T Pass color"}}